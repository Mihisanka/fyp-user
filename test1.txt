
///////////////////////////////////////bookings//////////////////////////////////////////////////////////////////////////////////////////////

import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";
import { ref, onValue, off, db1, set } from "../FirebaseConfig/Firebase.js";
import {MDBModal,MDBModalBody,MDBModalHeader,MDBModalFooter,MDBBtn,} from "mdb-react-ui-kit";

const Booking = () => {
  const [carparkData, setCarparkData] = useState([]);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState("all");
  const [showModal, setShowModal] = useState(false); // Changed default value to false
  const [selectedCarpark, setSelectedCarpark] = useState(null);

  useEffect(() => {
    const fetchData = () => {
      const carparkRef = ref(db1);
      const listener = onValue(
        carparkRef,
        (snapshot) => {
          try {
            if (snapshot && snapshot.exists()) {
              const data = snapshot.val();
              const carparkArray = Object.keys(data).map((key) => ({
                id: key,
                ...data[key],
              }));
              setCarparkData(carparkArray);
              setError(null);
            } else {
              setCarparkData([]);
              setError("No data available");
            }
          } catch (error) {
            setError(error.message);
          }
        },
        (error) => {
          setError(error.message); // Handle Firebase-related errors
        }
      );

      const interval = setInterval(fetchData, 5000);

      return () => {
        off(carparkRef, "value", listener); // Remove the listener
        clearInterval(interval);
      };
    };

    fetchData();
  }, []);

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
    setShowModal(false); // Close modal when filter changes
  };

  const filterData = () => {
    return filter === "all"
      ? carparkData
      : carparkData.filter((marker) => marker.availability === filter);
  };

  const toggleModal = () => {
    setShowModal(!showModal);
  };

  const customIcon = (availability) => {
    const fillColor = availability === "unavailable" ? "red" : "green";
    return L.divIcon({
      className: "custom-div-icon",
      html: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="${fillColor}" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
              <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>
            </svg>`,
    });
  };

  const handleBookClick = (marker) => {
    setSelectedCarpark(marker);
    setShowModal(true);
  };

  const handleBookCarpark = (id, e) => {
    e.stopPropagation();

    console.log("Selected Carpark:", selectedCarpark);

    if (selectedCarpark && selectedCarpark.bookedHours) {
      const updatedCarparkData = {
        bookings: selectedCarpark.bookedHours, // Update with the count of bookings
      };

      const carparkRef = ref(db1, id);
      set(carparkRef, updatedCarparkData)
        .then(() => {
          console.log("Document successfully updated!");
          // Update carparkData state
          setCarparkData((prevData) =>
            prevData.map((carpark) =>
              carpark.id === selectedCarpark.id
                ? { ...carpark, ...updatedCarparkData }
                : carpark
            )
          );
          // Clear selected carpark and close modal
          setSelectedCarpark(null);
          setShowModal(false);
        })
        .catch((error) => {
          console.error("Error updating document:", error);
          setError("Error updating document");
        });
    } else {
      console.error("Invalid selected carpark or booked hours");
      setError("Invalid selected carpark or booked hours");
    }
  };

  return (
    <div id="map" style={{ width: "100%", height: "1090px" }}>
      <div className="filter form-group">
        <label htmlFor="filter" className="label">
          Filter by Availability :
        </label>
        <select
          id="filter"
          className="form-control"
          value={filter}
          onChange={handleFilterChange}
        >
          <option value="all">All</option>
          <option value="available">Available</option>
          <option value="unavailable">Unavailable</option>
        </select>
      </div>
      <MDBModal show={showModal} onHide={toggleModal}>
        <MDBModalHeader>Book Carpark</MDBModalHeader>
        <MDBModalBody>
          {selectedCarpark && (
            <>
              <h2>{selectedCarpark.carparkName}</h2>
              <p>Enter number of hours:</p>
              <input
                type="number"
                value={selectedCarpark.bookedHours || ""}
                onChange={(e) =>
                  setSelectedCarpark({
                    ...selectedCarpark,
                    bookedHours: parseInt(e.target.value, 10),
                  })
                }
              />
            </>
          )}
        </MDBModalBody>
        <MDBModalFooter>
          <MDBBtn color="secondary" onClick={toggleModal}>
            Close
          </MDBBtn>
          <MDBBtn
            color="primary"
            onClick={() => handleBookCarpark(selectedCarpark.id)}
          >
            Book
          </MDBBtn>
        </MDBModalFooter>
      </MDBModal>
      {carparkData.length === 0 ? (
        <p>Loading...</p>
      ) : (
        <MapContainer
          center={[7.8731, 80.7718]}
          zoom={8}
          style={{ width: "100%", height: "800px" }}
        >
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          />
          {filterData().map((marker) => (
            <Marker
              key={marker.id}
              position={[
                parseFloat(marker.latitude),
                parseFloat(marker.longitude),
              ]} // Parse coordinates as floats
              icon={customIcon(marker.availability)}
            >
              <Popup>
                <div>
                  <h2>{marker.carparkName}</h2>
                  <p
                    style={{
                      color:
                        marker.availability === "available" ? "green" : "red",
                    }}
                  >
                    Availability :{" "}
                    {marker.availability.charAt(0).toUpperCase() +
                      marker.availability.slice(1)}
                  </p>
                  <p>Price : Rs.{marker.price}.00</p>
                  <p>Latitude: {marker.latitude}</p>
                  <p>Longitude: {marker.longitude}</p>
                  <Link to="/park-lot">
                  <button onClick={() => handleBookClick(marker)}>Book</button>
                  </Link>  
                </div>
              </Popup>
            </Marker>
          ))}
        </MapContainer>
      )}
    </div>
  );
};

export default Booking;


///////////////////////////////////////////////////////////////end ////////////////////////////////////////////////////




////////////////////////////////////////////parking lot start  28/03////////////////////////////////////////////////////////////////////////////

// import React, { useState, useEffect } from "react";
// import { db2 } from "../FirebaseConfig/Firebase";
// import "./styles/Registration.css";
// import { Link, useLocation } from "react-router-dom";
// import { getDocs, addDoc, collection, where, query } from "firebase/firestore";

// const ParkLot = ({ selectedData }) => {
//   const [name, setName] = useState("");
//   const [email, setEmail] = useState("");
//   const [password, setPassword] = useState("");
//   const [vehicleNumber, setVehicleNumber] = useState("");
//   const [phoneNumber, setPhoneNumber] = useState("");
//   const [selectedTimeSlot, setSelectedTimeSlot] = useState("");
//   const [parkingSlotName, setParkingSlotName] = useState(""); // State for parking slot name
//   const db2ref = collection(db2, "booking");
//   const [metch, setMetch] = useState([]);

//   // Get the email from query parameters
//   const { search } = useLocation();
//   const queryParams = new URLSearchParams(search);
//   const emailFromLogin = queryParams.get("email");

//   useEffect(() => {
//     // Fetch time slots from Firestore when the component mounts
//     getTimeSlots();
//     // Set initial state values based on selected data
//     if (selectedData) {
//       setName(selectedData.name || "");
//       setEmail(selectedData.email || "");
//       setVehicleNumber(selectedData.vehicleNumber || "");
//       setPhoneNumber(selectedData.phoneNumber || "");
//       setParkingSlotName(selectedData.parkingSlotName || ""); // Set parking slot name from selected data
//     }
//   }, [selectedData]);

//   const getTimeSlots = async () => {
//     const timeSlotsRef = collection(db2, "timeSlots");
//     try {
//       const snapshot = await getDocs(timeSlotsRef);
//       const slots = snapshot.docs.map((doc) => doc.data());
//       console.log("Time Slots:", slots);
//     } catch (error) {
//       console.error("Error fetching time slots:", error);
//     }
//   };

//   const registration = async () => {
//     const matchEmail = query(db2ref, where("Email", "==", email));
//     try {
//       const snapshot = await getDocs(matchEmail);
//       const emailMatchingArray = snapshot.docs.map((doc) => doc.data());
//       if (emailMatchingArray.length > 0) {
//         alert(`Booking unsuccessful `);
//       } else {
//         await addDoc(db2ref, {
//           Name: name,
//           Email: email,
//           Password: password,
//           VehicleNumber: vehicleNumber,
//           PhoneNumber: phoneNumber,
//           TimeSlot: selectedTimeSlot,
//           ParkingSlotName: parkingSlotName, // Include parking slot name in the document
//         });
//         alert("Booking successful");
//       }
//     } catch (error) {
//       alert(error.message);
//     }
//   };

//   // Set the email value if passed from Login component
//   if (emailFromLogin) {
//     setEmail(emailFromLogin);
//   }

//   // Array of time slots in 24-hour format
//   const timeSlots = [
//     "00:00 - 01:00",
//     "01:00 - 02:00",
//     "02:00 - 03:00",
//     "03:00 - 04:00",
//     "04:00 - 05:00",
//     "05:00 - 06:00",
//     "06:00 - 07:00",
//     "07:00 - 08:00",
//     "08:00 - 09:00",
//     "09:00 - 10:00",
//     "10:00 - 11:00",
//     "11:00 - 12:00",
//     "12:00 - 13:00",
//     "13:00 - 14:00",
//     "14:00 - 15:00",
//     "15:00 - 16:00",
//     "16:00 - 17:00",
//     "17:00 - 18:00",
//     "18:00 - 19:00",
//     "19:00 - 20:00",
//     "20:00 - 21:00",
//     "21:00 - 22:00",
//     "22:00 - 23:00",
//     "23:00 - 24:00",
//   ];

//   return (
//     <div className="container">
//       <div className="head">
//         <h2>Booking</h2>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Name"
//             onChange={(e) => setName(e.target.value)}
//             value={name}
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="email"
//             placeholder="Email"
//             onChange={(e) => setEmail(e.target.value)}
//             value={email} // Bind email value to the input field
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="password"
//             placeholder="Password"
//             onChange={(e) => setPassword(e.target.value)}
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Vehicle Number"
//             onChange={(e) => setVehicleNumber(e.target.value)}
//             value={vehicleNumber}
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Phone Number"
//             onChange={(e) => setPhoneNumber(e.target.value)}
//             value={phoneNumber}
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Parking Slot Name" // Add parking slot name field
//             onChange={(e) => setParkingSlotName(e.target.value)}
//             value={parkingSlotName}
//           ></input>
//         </div>
//         <div className="inputs">
//           <select
//             onChange={(e) => setSelectedTimeSlot(e.target.value)}
//             value={selectedTimeSlot}
//           >
//             <option value="" disabled>
//               Select Time Slot
//             </option>
//             {timeSlots.map((slot, index) => (
//               <option key={index} value={slot}>
//                 {slot}
//               </option>
//             ))}
//           </select>
//         </div>
//         <button onClick={registration}>Book Parking</button>
//         <div class="form-footer">
//           <p>
//             <Link to="/booking">Booking</Link>{" "}
//           </p>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ParkLot;


// import React, { useState, useEffect } from "react";
// import { db2 } from "../FirebaseConfig/Firebase";
// import "./styles/Registration.css";
// import { Link, useLocation } from "react-router-dom";
// import { addDoc, collection } from "firebase/firestore";

// const ParkLot = ({ selectedData }) => {
//   const [name, setName] = useState("");
//   const [vehicleNumber, setVehicleNumber] = useState("");
//   const [parkingSlotName, setParkingSlotName] = useState("");
//   const [selectedTimeSlot, setSelectedTimeSlot] = useState("");
//   const db2ref = collection(db2, "booking");
//   const [successMessage, setSuccessMessage] = useState("");
//   const [errorMessage, setErrorMessage] = useState("");

//   // Get the email from query parameters
//   const { search } = useLocation();
//   const queryParams = new URLSearchParams(search);
//   const emailFromLogin = queryParams.get("email");

//   useEffect(() => {
//     // Set initial state values based on selected data
//     if (selectedData) {
//       setName(selectedData.name || "");
//       setVehicleNumber(selectedData.vehicleNumber || "");
//       setParkingSlotName(selectedData.parkingSlotName || "");
//     }
//   }, [selectedData]);

//   const registration = async () => {
//     try {
//       await addDoc(db2ref, {
//         Name: name,
//         VehicleNumber: vehicleNumber,
//         ParkingSlotName: parkingSlotName,
//         TimeSlot: selectedTimeSlot,
//       });
//       setSuccessMessage("Booking successful");
//     } catch (error) {
//       setErrorMessage(error.message);
//     }
//   };

//   // Set the email value if passed from Login component
//   // if (emailFromLogin) {
//   //   setEmail(emailFromLogin);
//   // }

//   // Array of time slots in 24-hour format
//   const timeSlots = [
//     "00:00 - 01:00",
//     "01:00 - 02:00",
//     "02:00 - 03:00",
//     "03:00 - 04:00",
//     "04:00 - 05:00",
//     "05:00 - 06:00",
//     "06:00 - 07:00",
//     "07:00 - 08:00",
//     "08:00 - 09:00",
//     "09:00 - 10:00",
//     "10:00 - 11:00",
//     "11:00 - 12:00",
//     "12:00 - 13:00",
//     "13:00 - 14:00",
//     "14:00 - 15:00",
//     "15:00 - 16:00",
//     "16:00 - 17:00",
//     "17:00 - 18:00",
//     "18:00 - 19:00",
//     "19:00 - 20:00",
//     "20:00 - 21:00",
//     "21:00 - 22:00",
//     "22:00 - 23:00",
//     "23:00 - 24:00",
//   ];

//   return (
//     <div className="container">
//       <div className="head">
//         <h2>Booking</h2>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Name"
//             onChange={(e) => setName(e.target.value)}
//             value={name}
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Vehicle Number"
//             onChange={(e) => setVehicleNumber(e.target.value)}
//             value={vehicleNumber}
//           ></input>
//         </div>
//         <div className="inputs">
//           <input
//             type="text"
//             placeholder="Parking Slot Name"
//             onChange={(e) => setParkingSlotName(e.target.value)}
//             value={parkingSlotName}
//           ></input>
//         </div>
//         <div className="inputs">
//           <select
//             onChange={(e) => setSelectedTimeSlot(e.target.value)}
//             value={selectedTimeSlot}
//           >
//             <option value="" disabled>
//               Select Time Slot
//             </option>
//             {timeSlots.map((slot, index) => (
//               <option key={index} value={slot}>
//                 {slot}
//               </option>
//             ))}
//           </select>
//         </div>
//         <button onClick={registration}>Book Parking</button>
//         {successMessage && <p>{successMessage}</p>}
//         {errorMessage && <p>{errorMessage}</p>}
//         <div className="form-footer">
//           <p>
//             <Link to="/booking">Booking</Link>{" "}
//           </p>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ParkLot;

/////////////////////////////////////////////////////////////////parking lot end ////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////Nav bar//////////////////////////////////////////////////



// import React, { useState } from "react";
// import { Link, NavLink } from "react-router-dom";
// import "./styles/Navbar.css";
// import profileImg from "../component/Assets/profile-02.png";

// const Navbar = () => {
//   const [menuOpen, setMenuOpen] = useState(false);

//   const toggleMenu = () => {
//     setMenuOpen(!menuOpen);
//   };

//   return (
//     <nav className="navbar">
//       <div className="navbar-logo">
//         <Link to="/">Park Cloud</Link>
//       </div>

//       <div className={`navbar-menu ${menuOpen ? "active" : ""}`}> 
//         <ul>
//           <li>
//             <NavLink exact to="/" activeClassName="active-link">
//               Home
//             </NavLink>
//           </li>
//           <li>
//             <NavLink to="/booking" activeClassName="active-link">
//               Booking
//             </NavLink>
//           </li>
//           <li>
//             <NavLink to="/service" activeClassName="active-link">
//               Services
//             </NavLink>
//           </li>
//           <li>
//             <NavLink to="/about" activeClassName="active-link">
//               About
//             </NavLink>
//           </li>
//           <li className="profile">
//             <NavLink to="/login" activeClassName="active-link">
//               <img src={profileImg} alt="" />
//             </NavLink>
//           </li>
//         </ul>
//         {/* <div className="menu-icon" onClick={toggleMenu}>
//           <div className="bar"></div>
//           <div className="bar"></div>
//           <div className="bar"></div>
//         </div> */}
//       </div>
//     </nav>
//   );
// };

// export default Navbar;






// import * as React from "react";
// import Box from "@mui/material/Box";
// import Drawer from "@mui/material/Drawer";
// // import Button from "@mui/material/Button";
// import List from "@mui/material/List";
// import Divider from "@mui/material/Divider";
// import ListItem from "@mui/material/ListItem";
// import ListItemButton from "@mui/material/ListItemButton";
// import ListItemIcon from "@mui/material/ListItemIcon";
// import ListItemText from "@mui/material/ListItemText";
// import InboxIcon from "@mui/icons-material/MoveToInbox";
// // import MailIcon from "@mui/icons-material/Mail";
// import MenuIcon from "@mui/icons-material/Menu";
// import "./Navbar.css";
// import HomeIcon from "@mui/icons-material/Home";
// import InfoIcon from "@mui/icons-material/Info";
// import PermContactCalendarIcon from "@mui/icons-material/PermContactCalendar";

// const Navbar = () => {
//   const [state, setState] = React.useState({
//     top: false,
//     get top() {
//       return this.top;
//     },
//     set top(value) {
//       this._top = value;
//     },
//     left: false,
//     bottom: false,
//     right: false,
//   });

//   const toggleDrawer = (anchor, open) => (event) => {
//     if (
//       event.type === "keydown" &&
//       (event.key === "Tab" || event.key === "Shift")
//     ) {
//       return;
//     }

//     setState({ ...state, [anchor]: open });
//   };

//   const list = (anchor) => (
//     <Box
//       sx={{ width: anchor === "top" || anchor === "bottom" ? "auto" : 250 }}
//       role="presentation"
//       onClick={toggleDrawer(anchor, false)}
//       onKeyDown={toggleDrawer(anchor, false)}
//     >
//       <List>
//         {/* {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (
//                     <ListItem key={text} disablePadding>
//                         <ListItemButton>
//                             <ListItemIcon>
//                                 {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}
//                             </ListItemIcon>
//                             <ListItemText primary={text} />
//                         </ListItemButton>
//                     </ListItem>
//                 ))} */}

//         <ListItem disablePadding>
//           <ListItemButton>
//             <ListItemIcon>
//               <HomeIcon />
//             </ListItemIcon>
//             <ListItemText primary={"Home"} />
//           </ListItemButton>
//         </ListItem>
//         <ListItem disablePadding>
//           <ListItemButton>
//             <ListItemIcon>
//               <InfoIcon />
//             </ListItemIcon>
//             <ListItemText primary={"About"} />
//           </ListItemButton>
//         </ListItem>
//         <ListItem disablePadding>
//           <ListItemButton>
//             <ListItemIcon>
//               <PermContactCalendarIcon />
//             </ListItemIcon>
//             <ListItemText primary={"Contact"} />
//           </ListItemButton>
//         </ListItem>
//       </List>
//       <Divider />
//       <List>
//         <ListItem disablePadding>
//           <ListItemButton>
//             <ListItemIcon>
//               <InboxIcon />
//             </ListItemIcon>
//             <ListItemText primary={"inbox"} />
//           </ListItemButton>
//         </ListItem>
//       </List>
//     </Box>
//   );

//   return (
//     <div className="Navbar">
//       {/* {['left', 'right', 'top', 'bottom'].map((anchor) => (
//                 <React.Fragment key={anchor}>
//                     <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>
//                     <Drawer
//                         anchor={anchor}
//                         open={state[anchor]}
//                         onClose={toggleDrawer(anchor, false)}
//                     >
//                         {list(anchor)}
//                     </Drawer>
//                 </React.Fragment>
//             ))} */}

//       <MenuIcon onClick={toggleDrawer("left", true)} />

//       <Drawer
//         anchor={"left"}
//         open={state["left"]}
//         onClose={toggleDrawer("left", false)}
//       >
//         {list("left")}
//       </Drawer>
//     </div>
//   );
// };

// export default Navbar;


////////////////////////////////////////////////////////nav 2/////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////////////////////////////////////////

// import * as React from 'react';
// import Box from '@mui/material/Box';
// import Drawer from '@mui/material/Drawer';
// import Button from '@mui/material/Button';
// import List from '@mui/material/List';
// import Divider from '@mui/material/Divider';
// import ListItem from '@mui/material/ListItem';
// import ListItemButton from '@mui/material/ListItemButton';
// import ListItemIcon from '@mui/material/ListItemIcon';
// import ListItemText from '@mui/material/ListItemText';
// import InboxIcon from '@mui/icons-material/MoveToInbox';
// import MailIcon from '@mui/icons-material/Mail';
// import MenuIcon from '@mui/icons-material/Menu';
// import "./styles/Navbar.css";
// import HomeIcon from '@mui/icons-material/Home';
// import InfoIcon from '@mui/icons-material/Info';
// import PermContactCalendarIcon from '@mui/icons-material/PermContactCalendar';



// const Navbar = () => {

//     const [state, setState] = React.useState({
//         top: false,
//         left: false,
//         bottom: false,
//         right: false,
//     });

//     const toggleDrawer = (anchor, open) => (event) => {
//         if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {
//             return;
//         }

//         setState({ ...state, [anchor]: open });
//     };


//     const list = (anchor) => (
//         <Box
//             sx={{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 250 }}
//             role="presentation"
//             onClick={toggleDrawer(anchor, false)}
//             onKeyDown={toggleDrawer(anchor, false)}
//         >
//             <List>
//                 {/* {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (
//                     <ListItem key={text} disablePadding>
//                         <ListItemButton>
//                             <ListItemIcon>
//                                 {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}
//                             </ListItemIcon>
//                             <ListItemText primary={text} />
//                         </ListItemButton>
//                     </ListItem>
//                 ))} */}

//                 <ListItem disablePadding>
//                     <ListItemButton >
//                         <ListItemIcon>
//                             <HomeIcon />
//                         </ListItemIcon>
//                         <ListItemText primary={"Home"} />
//                     </ListItemButton>
//                 </ListItem>
//                 <ListItem disablePadding>
//                     <ListItemButton>
//                         <ListItemIcon>
//                             <InfoIcon />
//                         </ListItemIcon>
//                         <ListItemText primary={"About"} />
//                     </ListItemButton>
//                 </ListItem>
//                 <ListItem disablePadding>
//                     <ListItemButton>
//                         <ListItemIcon>
//                             <PermContactCalendarIcon />
//                         </ListItemIcon>
//                         <ListItemText primary={"Contact"} />
//                     </ListItemButton>
//                 </ListItem>
//             </List>
//             <Divider />
//             <List>
//                 <ListItem disablePadding>
//                     <ListItemButton>
//                         <ListItemIcon>
//                             <InboxIcon />
//                         </ListItemIcon>
//                         <ListItemText primary={"inbox"} />
//                     </ListItemButton>
//                 </ListItem>
//             </List>
//         </Box>
//     );

//     return (
//         <div className='Navbar'>
//             {/* {['left', 'right', 'top', 'bottom'].map((anchor) => (
//                 <React.Fragment key={anchor}>
//                     <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>
//                     <Drawer
//                         anchor={anchor}
//                         open={state[anchor]}
//                         onClose={toggleDrawer(anchor, false)}
//                     >
//                         {list(anchor)}
//                     </Drawer>
//                 </React.Fragment>
//             ))} */}



//             <MenuIcon
//                 onClick={
//                     toggleDrawer("left", true)
//                 }
//             />

//             <Drawer
//                 anchor={"left"}
//                 open={state["left"]}
//                 onClose={toggleDrawer("left", false)}
//             >
//                 {list("left")}
//             </Drawer>

//         </div>
//     )
// }

// export default Navbar



//////////////////////////////////////////////////nav bar end ////////////////////////////////////////////////////



//////////////////////////////////////////19/04/24 booking new/////////////////////////////////////////////////////

// import React, { useState, useEffect } from "react";
// import { Link, useParams, useNavigate } from "react-router-dom";
// import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
// import L from "leaflet";
// import "leaflet/dist/leaflet.css";
// import { ref, onValue, off, db1, set } from "../FirebaseConfig/Firebase.js";
// import {
//   MDBModal,
//   MDBModalBody,
//   MDBModalHeader,
//   MDBModalFooter,
//   MDBBtn,
// } from "mdb-react-ui-kit";

// const Booking = () => {
//   const { user, email } = useParams();
//   const decodedUser = user
//     ? decodeURIComponent(user.replace(/\+/g, " "))
//     : null;
//   const decodedEmail = email ? decodeURIComponent(email) : "";
//   const navigate = useNavigate();

//   const [carparkData, setCarparkData] = useState([]);
//   const [error, setError] = useState(null);
//   const [filter, setFilter] = useState("all");
//   const [showModal, setShowModal] = useState(false);
//   const [selectedCarpark, setSelectedCarpark] = useState(null);
//   const [userLocation, setUserLocation] = useState(null);

//   useEffect(() => {
//     const fetchData = () => {
//       const carparkRef = ref(db1);
//       const listener = onValue(
//         carparkRef,
//         (snapshot) => {
//           try {
//             if (snapshot && snapshot.exists()) {
//               const data = snapshot.val();
//               const carparkArray = Object.keys(data).map((key) => ({
//                 id: key,
//                 ...data[key],
//               }));
//               setCarparkData(carparkArray);
//               setError(null);
//             } else {
//               setCarparkData([]);
//               setError("No data available");
//             }
//           } catch (error) {
//             setError(error.message);
//           }
//         },
//         (error) => {
//           setError(error.message);
//         }
//       );

//       const interval = setInterval(fetchData, 5000);

//       return () => {
//         off(carparkRef, "value", listener);
//         clearInterval(interval);
//       };
//     };

//     fetchData();
//   }, []);

//   useEffect(() => {
//     const getLocation = () => {
//       if (navigator.geolocation) {
//         navigator.geolocation.getCurrentPosition(
//           (position) => {
//             setUserLocation([position.coords.latitude, position.coords.longitude]);
//           },
//           (error) => {
//             console.error("Error getting user location:", error);
//           }
//         );
//       } else {
//         console.error("Geolocation is not supported by this browser.");
//       }
//     };

//     getLocation();
//   }, []);

//   const handleFilterChange = (event) => {
//     setFilter(event.target.value);
//     setShowModal(false);
//   };

//   const toggleModal = () => {
//     setShowModal(!showModal);
//   };

//   const handleBookCarpark = (id, selectedCarparkData, e) => {
//     e.stopPropagation();

//     console.log("Selected Carpark Data:", selectedCarparkData);

//     if (selectedCarparkData && selectedCarparkData.bookedHours) {
//       const updatedCarparkData = {
//         bookings: selectedCarparkData.bookedHours,
//       };

//       const carparkRef = ref(db1, id);
//       set(carparkRef, updatedCarparkData)
//         .then(() => {
//           console.log("Document successfully updated!");
//           setCarparkData((prevData) =>
//             prevData.map((carpark) =>
//               carpark.id === selectedCarparkData.id
//                 ? { ...carpark, ...updatedCarparkData }
//                 : carpark
//             )
//           );
//           setSelectedCarpark(null);
//           setShowModal(false);
//         })
//         .catch((error) => {
//           console.error("Error updating document:", error);
//           setError("Error updating document");
//         });
//     } else {
//       console.error("Invalid selected carpark or booked hours");
//       setError("Invalid selected carpark or booked hours");
//     }
//   };

//   const filterData = () => {
//     return filter === "all"
//       ? carparkData
//       : carparkData.filter((marker) => marker.availability === filter);
//   };

//   const customIcon = (availability) => {
//     const fillColor = availability === "unavailable" ? "red" : "green";
//     return L.divIcon({
//       className: "custom-div-icon",
//       html: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="${fillColor}" class="bi bi-geo-alt-fill" viewBox="0 0 16 16">
//               <path d="M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10m0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6"/>
//             </svg>`,
//     });
//   };

//   const userIcon = L.divIcon({
//     className: "custom-div-icon",
//     html: `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="blue" class="bi bi-person-fill" viewBox="0 0 16 16">
//             <path d="M8 0c3.866 0 7 3.582 7 8 0 3.054-1.897 5.694-4.615 6.803-.176.071-.372.117-.572.117-.2 0-.396-.046-.572-.117C9.897 13.694 8 11.054 8 8c0-4.418 3.134-8 7-8zm-4.5 8a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0z"/>
//           </svg>`,
//   });

//   const handleBookClick = (marker) => {
//     setSelectedCarpark(marker);
//     setShowModal(true);
//     navigate("/park-lot", {
//       state: { selectedMarkerData: { ...marker, decodedUser } },
//     });
//     console.log("Selected Marker Data:", { ...marker, decodedUser });
//   };

//   const findNearestCarparkAndOpenModal = () => {
//     if (userLocation) {
//       const nearestCarpark = carparkData.reduce((nearest, current) => {
//         const distanceToCurrent = L.latLng(current.latitude, current.longitude)
//           .distanceTo(userLocation) / 1000; // Convert meters to kilometers
//         if (!nearest || distanceToCurrent < nearest.distance) {
//           return { ...current, distance: distanceToCurrent };
//         }
//         return nearest;
//       }, null);
//       if (nearestCarpark) {
//         console.log("Nearest Carpark Data:", nearestCarpark);
//         setSelectedCarpark(nearestCarpark);
//         setShowModal(true);
//       } else {
//         console.log("No carpark found");
//       }
//     } else {
//       console.log("User location not available");
//     }
//   };

//   return (
//     <div id="map" style={{ width: "100%", height: "1090px" }}>
//       <div className="filter form-group">
//         <label htmlFor="filter" className="label">
//           Filter by Availability :
//         </label>
//         <select
//           id="filter"
//           className="form-control"
//           value={filter}
//           onChange={handleFilterChange}
//         >
//           <option value="all">All</option>
//           <option value="available">Available</option>
//           <option value="unavailable">Unavailable</option>
//         </select>
//         <button className="btn btn-primary" onClick={findNearestCarparkAndOpenModal}>Recalibrate and Show Nearest Carpark</button>
//       </div>
//       <MDBModal show={showModal.toString()} onHide={() => setShowModal(false)}>
//         <MDBModalHeader>Book Carpark</MDBModalHeader>
//         <MDBModalBody>
//           {selectedCarpark && (
//             <>
//               <h2>{selectedCarpark.carparkName}</h2>
//               <p>Enter number of hours:</p>
//               <input
//                 type="number"
//                 value={selectedCarpark.bookedHours || ""}
//                 onChange={(e) =>
//                   setSelectedCarpark({
//                     ...selectedCarpark,
//                     bookedHours: parseInt(e.target.value, 10),
//                   })
//                 }
//               />
//             </>
//           )}
//         </MDBModalBody>
//         <MDBModalFooter>
//           <MDBBtn color="secondary" onClick={toggleModal}>
//             Close
//           </MDBBtn>
//           <MDBBtn
//             color="primary"
//             onClick={() =>
//               handleBookCarpark(selectedCarpark.id, selectedCarpark)
//             }
//           >
//             Book
//           </MDBBtn>
//         </MDBModalFooter>
//       </MDBModal>
//       {carparkData.length === 0 ? (
//         <p>Loading...</p>
//       ) : (
//         <MapContainer
//           center={userLocation || [7.8731, 80.7718]}
//           zoom={8}
//           style={{ width: "100%", height: "800px" }}
//         >
//           <TileLayer
//             url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
//             attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//           />
//           {filterData().map((marker) => (
//             <Marker
//               key={marker.id}
//               position={[
//                 parseFloat(marker.latitude),
//                 parseFloat(marker.longitude),
//               ]}
//               icon={customIcon(marker.availability)}
//             >
//               <Popup>
//                 <div>
//                   <h2>{marker.carparkName}</h2>
//                   <p
//                     style={{
//                       color:
//                         marker.availability === "available" ? "green" : "red",
//                     }}
//                   >
//                     Availability :{" "}
//                     {marker.availability.charAt(0).toUpperCase() +
//                       marker.availability.slice(1)}
//                   </p>
//                   <p>Price : Rs.{marker.price}.00</p>
//                   <p>Latitude: {marker.latitude}</p>
//                   <p>Longitude: {marker.longitude}</p>
//                   <button onClick={() => handleBookClick(marker)}>Book</button>
//                 </div>
//               </Popup>
//             </Marker>
//           ))}
//           {userLocation && (
//             <Marker position={userLocation} icon={userIcon}>
//               <Popup>You are here</Popup>
//             </Marker>
//           )}
//         </MapContainer>
//       )}
//     </div>
//   );
// };

// export default Booking;


///////////////////////////////////////////////////end new booking ///////////////////////////////////////////////////////




/////////////////////////////////////////////////old about page ///////////////////////////////////////////////////////

// import React from 'react';
// import './styles/AboutPage.css'; 

// // Import the CSS file for styling



// function AboutPage() {
//   return (
//     <div className="about-section">
//       <div className="about-heading">
//         <h1>About Us Page</h1>
//       </div>
//       <div className='about-c'>
//         <div className="about-box">
//           <div className="about-image">
//            {/* <img src="Park_Cloud/about.png" alt=""/>*/ }
         
//           </div>
//           {/* <h3>Service 4</h3>
//               <p>Description of Service 4 goes here.</p> */}
//         </div>
//         <div className="about-txt">
//           <h2>Some text about who we are and what we do.</h2>

//           <p>"Welcome to Park Cloud Car Park, your trusted destination for hassle-free parking solutions.
//             Our mission is to make parking effortless and stress-free for you. With a wide network of 
//             secure and conveniently located parking facilities, we ensure that finding a parking spot 
//             is never a challenge. Whether you're heading to work, exploring the city, or embarking on
//             a journey, count on us for your parking needs. Say goodbye to parking woes and experience 
//             the convenience of Park Cloud Car Park today."</p>
//         </div>
//       </div>



//       <div  class="team-member">
//         <h2 className="team-heading">Our Team</h2>
//       </div>

//       <div className="About-row">
//         <div class="card-info">
//                   <div class="card-border-top">
//                   </div>
//                   <div class="img">
//                   </div>
//                   <span>Mihisanka</span>
//                   <p class="job"> Job Title</p>
//                   <button> Click
//                   </button>
//         </div>

//               <div class="card-info">
//                   <div class="card-border-top">
//                   </div>
//                   <div class="img">
//                   </div>
//                   <span>Nayani</span>
//                   <p class="job"> Job Title</p>
//                   <button> Click
//                   </button>
//               </div>
//       </div>
      
          
//     </div>
//   );
// }

// export default AboutPage;


/////////////////////////////////// CSS///////////////////////////////////////////////////////////////////
/* .about-section {
  padding: 20px;
  text-align: center;
  background-color:rgb(255, 255, 255);
  color: rgb(69, 64, 64);
  height: auto;
  align-items: center;
}
.About-row{
  display: flex;
    flex-wrap: wrap;
    justify-content: center/*space-around/;
    margin-bottom: 10px;
    align-items: center;
}
/* .about-heading{
  padding-bottom: 5px;
} /
body {
  font-family: Arial, Helvetica, sans-serif;
  margin: 20;
  align-items: center;
  height: 120vh;
}

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

.about-c{
  display: flex;
  flex-wrap: wrap; /* Allow items to wrap to the next line on smaller screens /
  gap: 20px;
}

.column {
  display: flex;
  flex-wrap: wrap; /* Allow items to wrap to the next line on smaller screens /
  gap: 20px;
}

.card {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  margin: 8px;
}

.about-txt{
  text-align: center; /* Center-align the text /
  font-size: medium;
  width: auto;
  height: auto;
  padding-top: 10px;
  

  h2{
    padding-bottom: 20px;
  }

}

.team-member{
  align-items: center;
  padding-right: 50px;
  padding-bottom: 20px;
  padding-top: 20px;
 
}

.member-box {
  flex-basis: calc(50% - 20px);
  padding: 400px;
  margin: 10px; /* Add some spacing between boxes /
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 10px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 200px;
  height: 200px;
  float: left;
 
}

.container {
  padding: 0 16px;
}

.container::after, .row::after {
  content: "";
  clear: both;
  display: table;
}

.title {
  color: grey;
}

.button {
  border: none;
  outline: 0;
  display: inline-block;
  padding: 8px;
  color: white;
  background-color: #000;
  text-align: center;
  cursor: pointer;
  width: 100%;
}

.button:hover {
  background-color: #555;
}

/*card info/

.card-info {
  width: 190px;
  height: 254px;
  background: #3405a3;
  border-radius: 15px;
  box-shadow: 1px 5px 60px 0px #100a886b;
  margin-left:30px;
  align-items: center;
  
 }
 
 .card-info .card-border-top {
  width: 60%;
  height: 3%;
  background: #6b64f3;
  margin: auto;
  border-radius: 0px 0px 15px 15px;
 }
 
 .card-info span {
  font-weight: 600;
  color: white;
  text-align: center;
  display: block;
  padding-top: 10px;
  font-size: 16px;
 }
 
 .card-info .job {
  font-weight: 400;
  color: white;
  display: block;
  text-align: center;
  padding-top: 3px;
  font-size: 12px;
 }
 
 .card-info .img {
  width: 70px;
  height: 80px;
  background: #6b64f3;
  border-radius: 15px;
  margin: auto;
  margin-top: 25px;
 }
 
 .card-info button {
  padding: 8px 25px;
  display: block;
  margin: auto;
  border-radius: 8px;
  border: none;
  margin-top: 30px;
  background: #6b64f3;
  color: white;
  font-weight: 600;
 }
 
 .card-info button:hover {
  background: #534bf3;
 }

 @media(max-width:736px){
  .contact-form .main{
      flex-direction: column;
  }
  .contact-form form{
      margin-top: 30px;
      margin-bottom: 10px;

  }
  .form-img{
      border-radius: 0;
      border-bottom-left-radius: 8px;
      border-bottom-right-radius: 8px;
      order: 2;
  }
  .content{
      order: 1;
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;
  }
}




/******************************* About Me Card ******************************
.about-box {
  flex-basis: calc(50% - 20px);
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  align-items: right;
  width: 600px;
  height: 400px;
  
}*/


/* 
.info-cards{
  width:80%;
  max-width:400px;
  display:flex;
  flex-flow:row wrap;
  justify-content:space-evenly;
  align-items:center
}

.info-card{
  width:100%;
  max-width:290px;
  display:flex;
  flex-flow:row wrap;
  justify-content:center;
  align-items:center;
  padding:30px 0 15px;
  margin-bottom:50px;
  margin-top:30px;
  margin-left: 30px;
  border-radius:20px;
  box-shadow:0px 5px 5px rgba(0,0,0,.3),1px -1px 2px rgba(0,0,0,.4);
  cursor:pointer;
  transition:all .3s ease-in-out;
}

.info-card:hover{
  background:linear-gradient(45deg,  #085fbd 0%, rgba(3, 20, 151, 0.944));
  color:#fff;
  transform:scale(1.05)
}

.info-card:hover p{
  color:#fff
}
.info-card:active{
  transform:scale(0.95);
  background-color:#085fbd
}

.info-card .fab{
  font-size:80px
}
.info-card .fa-bitcoin{color:#f9aa4b;
   font-size:80px
  }

.info-card .fa-ethereum{
  color:#fff;
  padding:10px 20px;
  font-size:60px;
  border-radius:50%;
  background-color:#1181e8
}
.info-card__title{
  width:100%;
  font-size:2rem;
  margin:30px auto 20px
}
.info-card__title span{font-size:1rem;
  font-weight:400;
  color:#979797
}
.info-card__description{
  font-size:1.4rem;
  width:70%;
  color:#646464
}
.info-card__btn{
  width:150px;
  padding:9px 10px;
  background-color:#3671e9;
  color:#fff;
  border-radius:25px;
  display:inline-block;
  text-align:center;
  text-decoration:none;
  font-size:1.4rem;
  margin:30px auto
}
.info-card__btn i{
  margin-left:10px;
  color:#3671e9;
  background-color:#fff;
  border-radius:50%;
  padding:5px;
  width:25px
}
.info-card__icon{
  border-radius: 50px;
  width: 100px;
  height: 100px;
} */
/* .card-info__description span{
  color:#3b9af1
}
.card-info__advice{
  font-size:1rem;
  color:#979797
}
.card-info__description{
  font-size:1.3rem;
  font-weight:700;
  margin:15px auto
}
   */ 



////////////////////////////////////////////////////////////end ////////////////////////////////////////////////////


///////////////////////////////////////////////////////////NAV BAR CSS ////////////////////////////////

 /* NavBar.css
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color:#181b3a;
  padding: 10px 20px;
  color: rgb(250, 253, 253) ;
  text-align: center;

}

.navbar-logo a {
  text-decoration: none;
  font-size: 24px;
  color:rgb(254, 254, 254) ;
}

.navbar-menu{
color:rgb(251, 252, 252) ;

}

.navbar-menu ul {
  list-style: none;
  display: flex;
  color:rgba(247, 248, 248, 0.239) ;
}

.navbar-menu ul li {
  margin-right: 20px;
  color:rgb(245, 248, 248) ;
}

.navbar-menu ul li a {
  text-decoration: none;
  color: rgb(251, 251, 251) ;
  font-size: 18px;
}

.navbar-menu ul li a.active-link {
  font-weight: bold;
}
.navbar-menu  .profile {
  width: 40px;
  height: 40px;
  border-radius: 100%;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  object-fit: cover;
 
}
.navbar-menu .profile img {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  object-fit: cover;
}

.menu-icon {
  display: none;
  flex-direction: column;
  cursor: pointer;
}

.bar {
  background-color: white;
  height: 3px;
  width: 30px;
  margin: 4px 0;
}

.user-menu {
  display: flex;
  align-items: center;
  gap: 20px;
}

.menu-item {
  cursor: pointer;
  font-size: 18px;
  color:rgb(251, 252, 252);
}


@media (max-width: 768px) {
  .menu-icon {
    display: flex;
  }

  .navbar-menu {
    flex-direction: column;
    position: absolute;
    background-color:rgb(12, 14, 57);
    width: 100%;
    top: 65px;
    left: 0;
    transition: transform 0.3s ease-in-out;
    transform: translateY(-100%);
    z-index: 1;
  }

  .navbar-menu.active {
    transform: translateY(0);
  }

  .navbar-menu ul {
    flex-direction: column;
    align-items: center;
    /*flex-direction: column;/
  }

  .navbar-menu ul li {
    margin-right: 0;
    margin-bottom: 10px;
  }

  .navbar-menu ul li a {
    font-size: 20px;
    
  }

  .navbar {
    flex-direction: column; /* Stack logo and menu on top of each other /
    align-items: center; /* Center items in the column /
  }

  .navbar-logo {
    margin-bottom: 10px; /* Add space between logo and menu on small screens /
  }
}

 */


 /* .Navbar{
  display: flex;
  background-color: white;
  padding: 10px;
} */



 /* NavBar.css */
 /* .navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color:#181b3a;
  padding: 10px 20px;
  color: rgb(250, 253, 253) ;
  text-align: center;

}

.navbar-logo a {
  text-decoration: none;
  font-size: 24px;
  color:rgb(254, 254, 254) ;
}

.navbar-menu{
color:rgb(251, 252, 252) ;

}

.navbar-menu ul {
  list-style: none;
  display: flex;
  color:rgba(247, 248, 248, 0.239) ;
}

.navbar-menu ul li {
  margin-right: 20px;
  color:rgb(245, 248, 248) ;
}

.navbar-menu ul li a {
  text-decoration: none;
  color: rgb(251, 251, 251) ;
  font-size: 18px;
}

.navbar-menu ul li a.active-link {
  font-weight: bold;
}

.menu-icon {
  display: none;
  flex-direction: column;
  cursor: pointer;
}

.bar {
  background-color: white;
  height: 3px;
  width: 30px;
  margin: 4px 0;
}

.user-menu {
  display: flex;
  align-items: center;
  gap: 20px;
}

.menu-item {
  cursor: pointer;
  font-size: 18px;
  color:rgb(251, 252, 252);
}

@media (max-width: 768px) {
  .menu-icon {
    display: flex;
  }

  .navbar-menu {
    flex-direction: column;
    position: absolute;
    background-color:rgb(12, 14, 57);
    width: 100%;
    top: 65px;
    left: 0;
    transition: transform 0.3s ease-in-out;
    transform: translateY(-100%);
    z-index: 1;
  }

  .navbar-menu.active {
    transform: translateY(0);
  }

  .navbar-menu ul {
    flex-direction: column;
    align-items: center;
    /*flex-direction: column;/
  }

  .navbar-menu ul li {
    margin-right: 0;
    margin-bottom: 10px;
  }

  .navbar-menu ul li a {
    font-size: 20px;
    
  }

  .navbar {
    flex-direction: column; /* Stack logo and menu on top of each other /
    align-items: center; /* Center items in the column /
  }

  .navbar-logo {
    margin-bottom: 10px; /* Add space between logo and menu on small screens /
  }
}

 */

 //////////////////////////////////////CSS ENED ////////////////////////////////////////
 

 //////////////////////////////////////////login css///////////////////////////////////////
 

/* .container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 70%;
    height: 100vh;
    background-size: cover;
    background-position: center;
   
  }
  
  form{
      background-color: rgb(66, 66, 66);
  }
  
  h2{
      color: rgb(12, 14, 57);
      text-align: center;
  }


  .box.input{
    border: 2px solid transparent;
    width: 15em;
    height: 2.5em;
    padding-left: 0.8em;
    outline: none;
    overflow: hidden;
    background-color: #F3F3F3;
    border-radius: 10px;
    transition: all 0.5s;
    padding-top: 10px;
  }
  .box:hover,
    .box:focus {
      border: 2px solid #4A9DEC;
      box-shadow: 0px 0px 0px 7px rgb(74, 157, 236, 20%);
      background-color: white;
    }

  
  button{
      width: 100%;
      height: 50px;
      padding: 10px;
      border: none;
      background-color: rebeccapurple;
      color: white;
      border-radius: 5px;
      font-weight: bold;
      font-size: 18px;
      cursor: pointer;
      margin-top: 15px;
      margin-bottom: 30px;

      .hover{
        background-color: rgb(156, 91, 222);
      }
  }
   */

   //////////////////////////////////////////css end /////////////////////////////////////////////////
   

   ////////////////////////////////////////////////registarion css//////////////////////////////////////////////////
   /* 
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: auto;
    height: 100px;
    background-color: #01012b;/* Blue background /
    padding-top: 10px;
 
  }
 
 .container .registration-form {
    background-color: #f2f2f2;
    width: 600px;
    height: 500px; /* Gray form background /
    padding: 20px;
    border-radius: 25px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    .h2{
        color: #01012b;
    }
  }

  .button {
    padding: 10px 20px;
    background-color: #4287f5; /* Blue button /
    color: #fff;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 25px;
  }
   /* 
  .form-group {
    margin-bottom: 20px;
  }
  
  .form-group label {
    display: block;
    margin-bottom: 5px;
  }
  
  input[type='text'],
  input[type='email'],
  select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    border-radius: 15px;
  }
  
  button {
    padding: 10px 20px;
    background-color: #4287f5; /* Blue button /
    color: #fff;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 25px;
  }
  
  button:hover {
    background-color: #3366cc; /* Darker blue on hover /
  } */

  /* .container{
    padding: 20px 30px;
    background: #8e8e8e;
}

.container .form{
    padding:40px 30px
}
.container .form h2{
 text-align: center;
 font-size: 24px;
 color: black;
}

.container .form .box{
    margin-top:15px;
}

.container .form .box input{
    border:none;
    outline:none;
    border: 1px solid #dadada;
    padding: 20px 0px;
}

.container .form .button{
 
padding: 10px 30px;
width:50%;
height: 50%;
color: bisque;
border: none;
outline: none;
background: #8e8e8e;
margin-top: 15px;
cursor:pointer;
} */ */


///////////////////////////////////////////////end ///////////////////////////////////////////



/////////////////////////////////////////////nav bar/////////////////////////////////////////////////
// import React, { useState } from "react";
// import { Link, NavLink } from "react-router-dom";
// import "./styles/Navbar.css";

// const Navbar = () => {
//   const [menuOpen, setMenuOpen] = useState(false);

//   const toggleMenu = () => {
//     setMenuOpen(!menuOpen);
//   };

//   return (
//     <nav className="navbar">
//       <div className="navbar-logo">
//         <Link to="/">Park Cloud</Link>
//       </div>

//       <div className={`navbar-menu ${menuOpen ? "active" : ""}`}>
//         <ul>
//           <li>
//             <NavLink exact="true" to="/" activeclassname="active-link">
//               Home
//             </NavLink>
//           </li>
//           {/* <li>
//             <NavLink to="/booking" activeclassname="active-link">
//               Booking
//             </NavLink>
//           </li> */}
//           <li>
//             <NavLink to="/service" activeclassname="active-link">
//               Services
//             </NavLink>
//           </li>
//           <li>
//             <NavLink to="/about" activeclassname="active-link">
//               About
//             </NavLink>
//           </li>
//           <li>
//             <NavLink to="/login" activeclassname="active-link">
//               Login
//             </NavLink>
//           </li>
//         </ul>
//         <div className="menu-icon" onClick={toggleMenu}>
//           <div className="bar"></div>
//           <div className="bar"></div>
//           <div className="bar"></div>
//         </div>
//       </div>
//     </nav>
//   );
// };



// export default Navbar;


////////////////////////////////////////nav bar end /////////////////////////////////////
